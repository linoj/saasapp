== SaasRamp

[notice: not yet used in production]

SaasRamp is an open source Rails plugin which enables subscription billings in your application. I decided to take a somewhat different approach than others I have seen. It is built as a wrapper on ActiveMerchant, handles its own daily processing, and is completely independent of the authorization and authentication you choose.

== Key Features

* Built as a wrapper to ActiveMerchant
- Uses the AM gateways
- Uses the AM credit card validation

* Recurring billing and other daily tasks and notifications run on your server
- Does not use recurring billing at the gateway (which is subject to missed messages, synchronization issues with your app, etc)
- Run a rake billing task as a daily cron job
- Billing task can be run any time, skip a day, or multiple times a day without fear of screwing up or sending duplicate messages

* Decouples subscriptions from authentication and authorization 
- You can use Restful Authentication, Authlogic or anything else
- Declare your model (e.g. User) with acts_as_subscriber
- Or, for example, if users are scoped by an Account, you can declare the Account model acts_as_subscriber
- Similarly authorization can be added to controllers based on attributes of the logged in user, his current plan, etc. 
- None of this matters to SaasRamp.

* Separates the subscription, customer profile (credit card), and transaction history
- Each has its own model and database table for clean separation of resources. 

* Subscription model
- When a model acts_as_subscriber it has one subscription
- Subscription states - :free, :trial, :active, :past_due, :expired
- renew method processes recurring billing
- change_plan method for changing plans and billing or crediting the difference
- useful daily processing methods or you can roll your own

* Subscription plan model
- Define plans with different name, rate, interval
- Migrate in your own plan attributes to define limitations (e.g. max_memory, etc) 
- Plans defined in db/subscription_plans.yml file, loaded with rake subscription:plans task
- subscriptions belongs to plan

* Subscription profile model
- Responsible for handling the credit card information
- including validation, storing, and unstoring the customer profile and card on the gateway
- Profile states - :no_info, :authorized, :error
- subscription has one profile

* Subscription transaction model
- Provides a transaction history
- Wraps ActiveMerchant gateway api
- Handles exceptions and logging
- subscription has many transactions

* Example workflow:
- New subscriptions can default to a free plan
- New (non free) subscriptions start in :trial state (optional)
- A warning email is sent out a few days before trial expires (trial period configurable)
- When the trial period is over, the subscription becomes :active
- When renewals are due, :active subscriptions are billed and next renewal date is updated
- If there's a billing error, subscription becomes :past_due
- Past due subscriptions have a grace period (optional) and warnings are sent before subscription is :expired
- Expired subscriptions can revert to a limited plan rather than shut down

* Easy configuration and customization
- Configuration via a config/subscription.yml file (can vary per environment)
- Populate and maintain current plans via a db/subscription_plans.yml file (can vary per environment)
- Initializer generator for the default migration and configuration files
- Scaffold generator for example controllers and views
- Rake task for daily processing, you create a cron job
- Gateway monkeypatches in config/initializers/gateways/

=== Dependencies

Requires the following gems
- ActiveMerchant - for gateways and credit card validation
- Money - for currency numerics
- state_machine - a better state machine

Testing requires gems
- rspec, rspec-on-rails
- mocha

=== Configuration

- initial generator
- config/subscription.yml
- gateway
- db/subscription_plans.yml
- custom attributes for subscription_plan
- scaffold generator
		controllers
		views

=== Plan limits checker

In your subscriber model you can declare a callback, subscription_plan_check, that checks whether a subscriber has exceeded limits for his plan. This is used by Subscription#allowed_plans. The method is expected to return a blank value if ok (nil, false, [], {}), anything else means subscriber has exceeded limits. For example,

	def subscription_plan_check(plan)
		(memory_used > plan.max_memory) ||
		(file_count > plan.max_files)
	end
	
	# Or,
  def subscription_plan_check(plan)
    exceeded = {}
    exceeded[:memory_used] = plan.max_memory if memory_used > plan.max_memory
    exceeded[:file_count]  = plan.max_files  if file_count > plan.max_files
    exceeded
  end


=== Inspired by
(and snippets of code borrowed from)

* Peepcode ActiveMerchant pdf tutorial by Cody Fauser
* Railscasts ActiveMerchant screencasts (144, 145)
* The Bala Paranj screencasts on ActiveMerchant + Authorize.net
* Freemium
* Saasy

Developed for the ReviewRamp (www.reviewramp.com) application

== Cost

We appreciate a donation of $250 for one site, $1000 for multiple sites. (Just kidding).

== Notes

* Uses the Money class for money but haven't implemented currency or exchange rates
* I built this for a "freemium" business model (sign up free, pay for more features). It should work for "subscribe or nothing" but I havent worked through those scenarios. I figure you'll always want people to be able to log in and adjust their account even if they're not a paying subscriber at the moment.


Copyright (c) 2009 Jonathan Linowes, released under the MIT license
